# frozen_string_literal: true

# Description of the <%= name.to_s.camelize %> model
<% resource.fields.each do |field_name, field| %>
# @!attribute <%= field_name %>
#   @return [<%= field[:type].to_s.camelize %>] Description of this attribute
<% end -%>
class <%= name.to_s.camelize %> < ApplicationRecord
  include Pagination

  has_paper_trail

  <% resource.fields.each do |field_name, field| %>
  <%   unless basic? field[:type] %>
  ulid :<%= field_name %>_id
  belongs_to :<%= field_name %>, class_name: '<%= field[:type].to_s.camelize %>', foreign_key: :<%= field_name %>_id
  validates :<%= field_name %>, presence: true
  <%   end -%>
  <% end -%>

  <% if resource.owner %>
  ulid :<%= resource.owner %>_id
  belongs_to :<%= resource.owner %>
  validates :<%= resource.owner %>, presence: true
  <% end %>

  <% resource.collections.each do |collection_name, collection| %>
  has_many :<%= collection_name.to_s.pluralize %>, class_name: '<%= "#{name}_#{collection_name}".camelize %>', inverse_of: :<%= name %>
  <% end %>

  <% if resource.parent_name %>
  belongs_to :<%= resource.parent_name %>, autosave: true
  validates :<%= resource.parent_name %>, presence: true
  <% end %>

  <% resource.parent_fields.each do |parent, fields| %>
  delegate \
  <%- fields.each do |field_name, field| -%>
    :<%= field_name %>,
    :<%= field_name %>=,
    <% unless basic? field[:type] %>
    :<%= field_name %>_id,
    :<%= field_name %>_id=,
    <% end %>
  <%- end -%>
    to: :make_<%= parent %>

  ulid :<%= parent %>_id
  after_initialize :make_<%= parent %>
  before_validation :save_<%= parent %>

  def make_<%= parent %>
    self.<%= parent %> ||= <%= parent.to_s.camelize %>.new
  end

  def save_<%= parent %>
    return if !<%= parent %>
    
    self.<%= parent %>.save!
    self.id = <%= parent %>.id
  end
  <% end -%>

  scope :ordered_by, lambda { |attrib, direction|
    <% resource.parent_fields.each do |parent, fields| %>
    if %i[<%= fields.keys.select { |k| basic? fields[k][:type] }.join(' ') %>].include? attrib
      return joins(:<%= parent %>).merge(<%= parent.to_s.camelize %>.ordered_by(attrib, direction))
    end
    <%- end -%>
    order(attrib.to_sym => direction.to_sym)
  }
end
