# frozen_string_literal: true

# Service to describe an API based on the model metadata
module CollectionApiService
  def describe(resource_meta)
    describe_get(resource_meta)
    describe_post(resource_meta)
    describe_count(resource_meta)
    describe_object(resource_meta)
  end

  def describe_get(resource_meta)
    rclass = resource_meta.name.to_s.camelize.constantize
    columns = %i[id updated_at] + resource_meta.fields.keys
    desc "Get #{resource_meta.name.to_s.camelize.pluralize}"
    params do
      optional :page, type: Integer
      optional :count, type: Integer
      optional :sort, type: Symbol, values: columns, default: :id
      optional :order, type: Symbol, values: %i[asc desc], default: :asc
    end
    get do
      count = params[:count] || 20
      page = params[:page] || 1
      page = [1, page].max
      count = [1, count].max
      count = [count, 50].min
      result = rclass.limit(count).offset((page - 1) * count)
      result = result.ordered_by(params[:sort], params[:order])
      present result, with: CollectionPresenter.new(resource_meta)
    end
  end

  def describe_count(resource_meta)
    desc "Number of #{resource_meta.name.to_s.camelize.pluralize}"
    get '_count' do
      {
        count: resource_meta.name.to_s.camelize.constantize.count
      }
    end
  end

  def describe_post(resource_meta)
    rclass = resource_meta.name.to_s.camelize.constantize
    desc "Create a new #{resource_meta.name.to_s.camelize.pluralize}"
    params do
      resource_meta.fields.each do |field_name, field|
        if %i[string integer boolean].include?(field[:type])
          requires field_name, type: field[:type].to_s.camelize.constantize
        else
          requires "#{field_name}_id", type: String
        end
      end
    end
    post do
      begin
        item = rclass.create!(params)
        present item, with: ObjectPresenter.new(resource_meta)
      rescue ActiveRecord::RecordInvalid
        error!({ error: :invalid_value }, 400)
      end
    end
  end

  def describe_object(resource_meta)
    params do
      requires :"#{resource_meta.name}_id",
               type: String,
               desc: "ID of the #{resource_meta.name}"
    end
    route_param :"#{resource_meta.name}_id" do
      extend ObjectApiService
      describe(resource_meta)
    end
  end
end
