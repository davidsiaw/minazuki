# frozen_string_literal: true

module V1
  # Endpoint to access <%= name.to_s.pluralize.humanize %>
  class <%= name.to_s.pluralize.camelize %>Api < Grape::API
    resource :<%= name.to_s.pluralize %> do
      desc 'Get <%= name.to_s.pluralize.humanize %>' do
        success V1::<%= name.to_s.camelize %>Entity::<%= name.to_s.camelize %>CollectionDocumentation
      end
      params do
        optional :page, type: Integer
        optional :count, type: Integer
        optional :sort, type: Symbol, values: %i[<%= (resource.fields.map { |n, _| n } + [:id] + resource.parent_fields.map{ |k, fields| fields.keys.select { |k| %i[string integer].include?(fields[k][:type]) } }.flatten ).join(' ') %>], default: :id
        optional :order, type: Symbol, values: %i[asc desc], default: :asc
      end
      get do
        count = params[:count] || 20
        page = params[:page] || 1
        page = [1, page].max
        count = [1, count].max
        count = [count, 50].min
        result = <%= name.to_s.camelize %>.limit(count).offset((page - 1) * count)
        result = result.ordered_by(params[:sort], params[:order])
        present result, with: V1::<%= name.to_s.camelize %>Entity
      end

      desc 'Create a new <%= name.to_s.humanize %>' do
        success V1::<%= name.to_s.camelize %>Entity::<%= name.to_s.camelize %>Documentation
      end
      params do
        <% resource.fields.each do |field_name, field| %>
        <%   if %i[string integer].include? field[:type] %>
        requires :<%= field_name %>, type: <%= field[:type].to_s.camelize %>
        <%   else %>
        requires :<%= field_name %>_id, type: String
        <%   end %>
        <% end %>

        <% resource.parent_fields.each do |parent, fields| %>
        # Inherited from <%= parent %>
        <% fields.each do |field_name, field| %>
        <%   if %i[string integer].include? field[:type] %>
        requires :<%= field_name %>, type: <%= field[:type].to_s.camelize %>
        <%   else %>
        requires :<%= field_name %>_id, type: String
        <%   end %>
        <% end -%>
        <% end -%>
      end
      post do
        item = <%= name.to_s.camelize %>.create!(params)
        present item, with: V1::<%= name.to_s.camelize %>Entity
      end

      params do
        requires :id, type: String, desc: 'ID of <%= name.to_s.humanize %>'
      end
      route_param :id do
        before do
          @item = <%= name.to_s.camelize %>.find_by(id: params[:id])
          error!({ error: :not_found }, 404) if @item.nil?
        end

        desc 'Get a <%= name.to_s.humanize %>' do
          success V1::<%= name.to_s.camelize %>Entity::<%= name.to_s.camelize %>Documentation
        end
        get do
          present @item, with: V1::<%= name.to_s.camelize %>Entity
        end

        desc 'Change a <%= name.to_s.humanize %>' do
          success V1::<%= name.to_s.camelize %>Entity::<%= name.to_s.camelize %>Documentation
        end
        patch do
          present @item, with: V1::<%= name.to_s.camelize %>Entity
        end

        desc 'Delete a <%= name.to_s.humanize %>'
        delete do
          @item.destroy!
          { result: :ok }
        end

        <% resource.fields.each do |field_name, field| %>
        resource :<%= field_name %> do
          desc 'Get the <%= field_name.to_s.humanize %> of the <%= name.to_s.humanize %>'
          get do
            {
              result: @item.name
            }
          end

          desc 'Set the <%= field_name.to_s.humanize %> of the <%= name.to_s.humanize %>'
          params do
            requires :value, type: <%= field[:type].to_s.camelize %>
          end
          put do
            @item.<%= field_name %> = params[:value]
            @item.save!
            {
              result: @item.name
            }
          end
        end
        <% end %>

        <% resource.parent_fields.each do |parent, fields| %>
        # Inherited from <%= parent %>
        <% fields.each do |field_name, field| %>
        resource :<%= field_name %> do
          desc 'Get the <%= field_name.to_s.humanize %> of the <%= name.to_s.humanize %>'
          get do
            {
              result: @item.<%= field_name %>
            }
          end

          desc 'Set the <%= field_name.to_s.humanize %> of the <%= name.to_s.humanize %>'
          params do
          <% if %i[string integer].include? field[:type] %>
            requires :value, type: <%= field[:type].to_s.camelize %>, desc: 'New <%= field_name %>'
          <% else %>
            requires :value, type: String, desc: 'New <%= field_name %>'
          <% end %>
          end
          put do
            <% if %i[string integer].include? field[:type] %>
            @item.<%= field_name %> = params[:value]
            <% else %>
            @item.<%= field_name %>_id = params[:value]
            <% end %>
            begin
              @item.save!
            rescue ActiveRecord::RecordInvalid => e
              error!({ error: :invalid_value }, 400)
            end
            {
              result: @item.<%= field_name %>
            }
          end
        end
        <% end -%>
        <% end -%>
      end
    end
  end
end
