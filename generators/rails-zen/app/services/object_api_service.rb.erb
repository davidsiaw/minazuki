# frozen_string_literal: true

# Service to describe an API based on the model metadata
module ObjectApiService
  BASIC_TYPES = %i[string integer boolean]

  def describe!(resource_meta, inner: false)
    describe_get!(resource_meta)
    describe_put!(resource_meta)
    describe_delete!(resource_meta)

    resource_meta.fields.each do |field_name, field|
      describe_field!(resource_meta, field_name, field, inner: inner)
    end

    resource_meta.collections.each do |collection_name, collection|
      describe_collection!(resource_meta, collection_name,
                           collection, inner: inner)
    end
  end

  def describe_get!(resource_meta)
    desc "Get a #{resource_meta.name.to_s.humanize}"
    get do
      present @item, with: ObjectPresenter.new(resource_meta)
    end
  end

  def describe_put_params!(resource_meta)
    params do
      resource_meta.fields.each do |field_name, field|
        if BASIC_TYPES.include?(field[:type])
          requires field_name, type: field[:type].to_s.camelize.constantize
        else
          requires "#{field_name}_id", type: String
        end
      end
    end
  end

  def describe_put!(resource_meta)
    desc "Modify a #{resource_meta.name.to_s.humanize}"
    describe_put_params!(resource_meta)
    put do
      resource_meta.fields.each do |field_name, field|
        field_ident = "#{field_name}_id"
        field_ident = field_name if BASIC_TYPES.include?(field[:type])
        @item.send(:"#{field_ident}=", params[field_ident])
      end
      @item.save!
      present @item, with: ObjectPresenter.new(resource_meta)
    end
  end

  def describe_delete!(resource_meta)
    desc "Delete the #{resource_meta.name.to_s.humanize}"
    delete do
      @item.destroy!
      present @item, with: ObjectPresenter.new(resource_meta)
    end
  end

  def describe_field!(resource_meta, field_name, field, inner:)
    return if inner

    resource field_name do
      desc "Get the #{field_name.to_s.humanize} of the #{resource_meta.name.to_s.humanize}"
      get do
        if BASIC_TYPES.include?(field[:type])
          @item.send(field_name)
        else
          meta_class = "#{field[:type].to_s.camelize}Meta".constantize
          present @item.send(field_name), with: ObjectPresenter.new(meta_class.new)
        end
      end
    end
  end

  def describe_collection!(resource_meta, collection_name, collection, inner:)
    resource collection_name do
      extend CollectionApiService
      meta_class = "#{collection[:type].to_s.camelize}Meta".constantize
      describe(meta_class.new, inner: true)
    end
  end
end
